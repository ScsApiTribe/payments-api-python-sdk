# coding: utf-8

"""
    Payments

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 5.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PaymentDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, amount=None, description=None, id=None, idempotency_key=None, payment_status=None, payment_status_details=None):
        """
        PaymentDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'amount': 'float',
            'description': 'str',
            'id': 'str',
            'idempotency_key': 'str',
            'payment_status': 'str',
            'payment_status_details': 'str'
        }

        self.attribute_map = {
            'amount': 'amount',
            'description': 'description',
            'id': 'id',
            'idempotency_key': 'idempotencyKey',
            'payment_status': 'paymentStatus',
            'payment_status_details': 'paymentStatusDetails'
        }

        self._amount = amount
        self._description = description
        self._id = id
        self._idempotency_key = idempotency_key
        self._payment_status = payment_status
        self._payment_status_details = payment_status_details

    @property
    def amount(self):
        """
        Gets the amount of this PaymentDetails.
        The gross amount in Swiss Francs (CHF). Includes the VAT. Negative value represents refund.

        :return: The amount of this PaymentDetails.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this PaymentDetails.
        The gross amount in Swiss Francs (CHF). Includes the VAT. Negative value represents refund.

        :param amount: The amount of this PaymentDetails.
        :type: float
        """

        self._amount = amount

    @property
    def description(self):
        """
        Gets the description of this PaymentDetails.
        The description or purpose of the payment as shown on the bill.

        :return: The description of this PaymentDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PaymentDetails.
        The description or purpose of the payment as shown on the bill.

        :param description: The description of this PaymentDetails.
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """
        Gets the id of this PaymentDetails.
        The payment transaction identifier generated from the API used to track the transaction.

        :return: The id of this PaymentDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PaymentDetails.
        The payment transaction identifier generated from the API used to track the transaction.

        :param id: The id of this PaymentDetails.
        :type: str
        """

        self._id = id

    @property
    def idempotency_key(self):
        """
        Gets the idempotency_key of this PaymentDetails.
        The key identifier provided by the API consumer used so that the same transaction cannot be made twice.For example, if a request to create a charge fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single charge is created.

        :return: The idempotency_key of this PaymentDetails.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """
        Sets the idempotency_key of this PaymentDetails.
        The key identifier provided by the API consumer used so that the same transaction cannot be made twice.For example, if a request to create a charge fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single charge is created.

        :param idempotency_key: The idempotency_key of this PaymentDetails.
        :type: str
        """

        self._idempotency_key = idempotency_key

    @property
    def payment_status(self):
        """
        Gets the payment_status of this PaymentDetails.
        Specifies the status of the payment transaction. eg: billed,accepted,error

        :return: The payment_status of this PaymentDetails.
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """
        Sets the payment_status of this PaymentDetails.
        Specifies the status of the payment transaction. eg: billed,accepted,error

        :param payment_status: The payment_status of this PaymentDetails.
        :type: str
        """

        self._payment_status = payment_status

    @property
    def payment_status_details(self):
        """
        Gets the payment_status_details of this PaymentDetails.
        Details in case the payment transaction is in error status.

        :return: The payment_status_details of this PaymentDetails.
        :rtype: str
        """
        return self._payment_status_details

    @payment_status_details.setter
    def payment_status_details(self, payment_status_details):
        """
        Sets the payment_status_details of this PaymentDetails.
        Details in case the payment transaction is in error status.

        :param payment_status_details: The payment_status_details of this PaymentDetails.
        :type: str
        """

        self._payment_status_details = payment_status_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
