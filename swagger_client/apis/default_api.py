# coding: utf-8

"""
    Payments

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 5.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_payment(self, scs_version, payment_request, **kwargs):
        """
        
        #### Makes a payment transaction #### Allows to charge or refund an amount to the end user's bill. When creating a payment, specify the actual transactions details like idempotencyKey, amount and description. Please note that the description must be encoded in ISO-8859-1 charset. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_payment(scs_version, payment_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scs_version: The version of the API, value must be \"**<<SCS-Version>>**\".  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message.  (required)
        :param PaymentRequest payment_request:  (required)
        :param str scs_request_id: The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
        :return: PaymentStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_payment_with_http_info(scs_version, payment_request, **kwargs)
        else:
            (data) = self.create_payment_with_http_info(scs_version, payment_request, **kwargs)
            return data

    def create_payment_with_http_info(self, scs_version, payment_request, **kwargs):
        """
        
        #### Makes a payment transaction #### Allows to charge or refund an amount to the end user's bill. When creating a payment, specify the actual transactions details like idempotencyKey, amount and description. Please note that the description must be encoded in ISO-8859-1 charset. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_payment_with_http_info(scs_version, payment_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scs_version: The version of the API, value must be \"**<<SCS-Version>>**\".  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message.  (required)
        :param PaymentRequest payment_request:  (required)
        :param str scs_request_id: The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
        :return: PaymentStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scs_version', 'payment_request', 'scs_request_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scs_version' is set
        if ('scs_version' not in params) or (params['scs_version'] is None):
            raise ValueError("Missing the required parameter `scs_version` when calling `create_payment`")
        # verify the required parameter 'payment_request' is set
        if ('payment_request' not in params) or (params['payment_request'] is None):
            raise ValueError("Missing the required parameter `payment_request` when calling `create_payment`")

        resource_path = '/payments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'scs_request_id' in params:
            header_params['SCS-Request-ID'] = params['scs_request_id']
        if 'scs_version' in params:
            header_params['SCS-Version'] = params['scs_version']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payment_request' in params:
            body_params = params['payment_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=ISO-8859-1'])

        # Authentication setting
        auth_settings = ['oauth_2_0_client_credentials', 'oauth_2_0_authorization_code']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_payment(self, payment_id, scs_version, **kwargs):
        """
        
        #### Returns the payment transaction details #### Allows to retrieve the details of a payment represented by the payment identifier provided as the parameter. The payment identifier is the identifier which is returned with the location header in the response for POST payment.  The payment details and the status of the payment transaction can be retrieved from the response. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment(payment_id, scs_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_id: The unique identifier of a payment transaction. This is the same identifier which is returned with the location header of the response in the POST payment.  The value of the URI parameter must not contain spaces and should be URL encoded.  (required)
        :param str scs_version: The version of the API, value must be \"**<<SCS-Version>>**\".  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message.  (required)
        :param str scs_request_id: The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
        :return: PaymentDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_payment_with_http_info(payment_id, scs_version, **kwargs)
        else:
            (data) = self.get_payment_with_http_info(payment_id, scs_version, **kwargs)
            return data

    def get_payment_with_http_info(self, payment_id, scs_version, **kwargs):
        """
        
        #### Returns the payment transaction details #### Allows to retrieve the details of a payment represented by the payment identifier provided as the parameter. The payment identifier is the identifier which is returned with the location header in the response for POST payment.  The payment details and the status of the payment transaction can be retrieved from the response. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment_with_http_info(payment_id, scs_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_id: The unique identifier of a payment transaction. This is the same identifier which is returned with the location header of the response in the POST payment.  The value of the URI parameter must not contain spaces and should be URL encoded.  (required)
        :param str scs_version: The version of the API, value must be \"**<<SCS-Version>>**\".  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message.  (required)
        :param str scs_request_id: The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
        :return: PaymentDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', 'scs_version', 'scs_request_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params) or (params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment`")
        # verify the required parameter 'scs_version' is set
        if ('scs_version' not in params) or (params['scs_version'] is None):
            raise ValueError("Missing the required parameter `scs_version` when calling `get_payment`")

        resource_path = '/payments/{paymentId}'.replace('{format}', 'json')
        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']

        query_params = {}

        header_params = {}
        if 'scs_request_id' in params:
            header_params['SCS-Request-ID'] = params['scs_request_id']
        if 'scs_version' in params:
            header_params['SCS-Version'] = params['scs_version']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth_2_0_client_credentials', 'oauth_2_0_authorization_code']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentDetails',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def search_payments(self, scn, scs_version, **kwargs):
        """
        
        #### Search Payment Transactions #### Provides the capability to search for payment transactions based on a customer identifier. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_payments(scn, scs_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scn: The Swisscom customer number (SCN) that uniquely identifies a customer.  Performing the request with this query parameter returns the list of payment transactions made on the Swisscom bill of the customer represented by the identifier.  (required)
        :param str scs_version: The version of the API, value must be \"**<<SCS-Version>>**\".  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message.  (required)
        :param str date_from: Defines the date range of the returned transactions. The date has to be in format yyyy-mm-dd.
        :param str date_to: Defines the date range of the returned transactions. The date has to be in format yyyy-mm-dd.
        :param str scs_request_id: The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
        :return: PaymentsCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_payments_with_http_info(scn, scs_version, **kwargs)
        else:
            (data) = self.search_payments_with_http_info(scn, scs_version, **kwargs)
            return data

    def search_payments_with_http_info(self, scn, scs_version, **kwargs):
        """
        
        #### Search Payment Transactions #### Provides the capability to search for payment transactions based on a customer identifier. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_payments_with_http_info(scn, scs_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scn: The Swisscom customer number (SCN) that uniquely identifies a customer.  Performing the request with this query parameter returns the list of payment transactions made on the Swisscom bill of the customer represented by the identifier.  (required)
        :param str scs_version: The version of the API, value must be \"**<<SCS-Version>>**\".  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message.  (required)
        :param str date_from: Defines the date range of the returned transactions. The date has to be in format yyyy-mm-dd.
        :param str date_to: Defines the date range of the returned transactions. The date has to be in format yyyy-mm-dd.
        :param str scs_request_id: The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
        :return: PaymentsCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scn', 'scs_version', 'date_from', 'date_to', 'scs_request_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_payments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scn' is set
        if ('scn' not in params) or (params['scn'] is None):
            raise ValueError("Missing the required parameter `scn` when calling `search_payments`")
        # verify the required parameter 'scs_version' is set
        if ('scs_version' not in params) or (params['scs_version'] is None):
            raise ValueError("Missing the required parameter `scs_version` when calling `search_payments`")

        resource_path = '/payments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'scn' in params:
            query_params['scn'] = params['scn']
        if 'date_from' in params:
            query_params['dateFrom'] = params['date_from']
        if 'date_to' in params:
            query_params['dateTo'] = params['date_to']

        header_params = {}
        if 'scs_request_id' in params:
            header_params['SCS-Request-ID'] = params['scs_request_id']
        if 'scs_version' in params:
            header_params['SCS-Version'] = params['scs_version']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth_2_0_client_credentials', 'oauth_2_0_authorization_code']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentsCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
